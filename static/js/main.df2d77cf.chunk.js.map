{"version":3,"sources":["Player.js","App.js","reportWebVitals.js","index.js"],"names":["Player","useState","type","setType","epi","setEpi","url","setUrl","useEffect","fetch","then","res","ok","json","data","token","switchEpi","e","target","innerText","episodeList","i","push","onClick","className","icon","faArrowAltCircleLeft","faArrowAltCircleRight","title","src","allowFullScreen","frameBorder","scrolling","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAgEeA,EA3DA,WACX,MAAwBC,mBAAS,OAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsBF,mBAAS,GAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAAsBJ,mBAAS,4FAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KAEJC,qBAAU,WAENC,MAAM,yBAAD,OAA0BP,EAA1B,YAAkCE,EAAI,IAC1CM,MAAK,SAAAC,GACF,GAAGA,EAAIC,GAAK,OAAOD,EAAIE,UACxBH,MAAK,SAAAI,GAAI,OAAIP,EAAgB,QAATL,EAAA,iDAA2DY,EAAKC,MAAhE,oDAAiHX,GAAjH,iDAAmKU,EAAKC,MAAxK,0CAA+MX,SAEvO,CAACF,EAAME,IAqBV,IAnBI,IAgBMY,EAAY,SAACC,GAAD,OAAOZ,EAAOY,EAAEC,OAAOC,YAEvCC,EAAc,GACXC,EAAI,EAAGA,GAAK,GAAIA,IAAMD,EAAYE,KAAK,oBAAYC,QAASP,EAArB,SAAiCK,GAAxBA,IAErD,OACI,gCACI,0CAAajB,KACb,sBAAKoB,UAAU,UAAf,UACVpB,EAAM,GAAK,cAAC,IAAD,CAAiBoB,UAAU,OAAOC,KAAMC,IAAsBH,QAVnD,kBAAMlB,EAAOD,EAAM,MAWzCA,EAAM,IAAM,cAAC,IAAD,CAAiBoB,UAAU,QAAQC,KAAME,IAAuBJ,QAZ1D,kBAAMlB,EAAOD,EAAM,SAc/B,qBAAKoB,UAAU,QAAf,SACR,wBAAQI,MAAM,eAAeC,IAAKvB,EAAKwB,iBAAiB,EAAMC,YAAY,KAAKC,UAAU,SAGzF,qBAAKR,UAAU,SAAf,SACQ,wBAAQD,QAjCO,SAACN,GAEJ,QAATf,IAECC,EAAQ,OACRc,EAAEC,OAAOC,UAAY,aAGb,QAATjB,IAECC,EAAQ,OACRc,EAAEC,OAAOC,UAAY,cAsBzB,yBAGN,qBAAKK,UAAU,OAAf,SACU,6BAAKJ,UC5CFa,MAVf,WACE,OACE,sBAAKT,UAAU,MAAf,UACE,gDACA,uBACA,cAAC,EAAD,QCKSU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.df2d77cf.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowAltCircleLeft } from '@fortawesome/free-regular-svg-icons';\nimport { faArrowAltCircleRight } from '@fortawesome/free-regular-svg-icons';\n\nconst Player = () =>  {\n    const [type, setType] = useState(\"DUB\");\n    const [epi, setEpi] = useState(1);\n    const [url, setUrl] = useState(\"https://streamani.net/streaming.php?id=OTA3OTk=&amp;title=Death+Note+%28Dub%29+episode+1\")\n\nuseEffect(() => {\n\n    fetch(`http://localhost:3000/${type}/${epi-1}`)\n    .then(res => {\n        if(res.ok) {return res.json()}\n    }).then(data => setUrl(type === \"DUB\" ? `https://streamani.net/streaming.php?id=${data.token}=&amp;title=Death+Note+%28Dub%29+episode+${epi}` : `https://streamani.net/streaming.php?id=${data.token}=&amp;title=Death+Note+Episode+${epi}`))\n\n}, [type, epi])\n\n    const switchType = (e) => {\n      \n        if(type === \"DUB\") {\n            \n            setType(\"SUB\"); \n            e.target.innerText = \"Watch Dub\";\n        } \n\n        if(type === \"SUB\") {\n\n            setType(\"DUB\"); \n            e.target.innerText = \"Watch Sub\";\n        }\n}\n    const nextEpi = () => setEpi(epi + 1);\n    const pervouisEpi = () => setEpi(epi - 1);\n    const switchEpi = (e) => setEpi(e.target.innerText);\n        \nconst episodeList = [];\nfor (let i = 1; i <= 37; i++) {episodeList.push(<li key={i} onClick={switchEpi}>{i}</li>)}\n\n    return (\n        <div>\n            <h2>Episode {epi}</h2>\n            <div className=\"buttons\">\n{ epi > 1 && <FontAwesomeIcon className=\"left\" icon={faArrowAltCircleLeft} onClick={pervouisEpi} /> }\n{ epi < 37 && <FontAwesomeIcon className=\"right\" icon={faArrowAltCircleRight} onClick={nextEpi} /> }\n</div>\n        <div className=\"video\">\n<iframe title=\"Video Player\" src={url} allowFullScreen={true} frameBorder=\"no\" scrolling=\"no\"></iframe>\n\n</div>\n<div className=\"switch\">\n        <button onClick={switchType}>Watch Sub</button>\n    </div> \n  \n  <div className=\"List\">\n            <ul>{episodeList}</ul>\n        </div>\n\n</div>\n\n    );\n}\n\nexport default Player;\n","import Player from './Player';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>WatchDeathNote</h1>\n      <hr />\n      <Player />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}